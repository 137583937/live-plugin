apply plugin: 'groovy'

repositories {
	mavenCentral()
}

dependencies {
	compile group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.0.6'
	compile group: 'junit', name: 'junit', version: '4.10'
	compile group: 'org.clojure', name: 'clojure', version: '1.5.1'
	compile group: 'org.scala-lang', name: 'scala-compiler', version: '2.10.2'
	compile group: 'org.scala-lang', name: 'scala-library', version: '2.10.2'
	compile group: 'org.scala-lang', name: 'scala-reflect', version: '2.10.2'
	compile('com.googlecode.jarjar:jarjar:1.3')
}

task downloadLibs(type: Copy) {
	from configurations.runtime
	into './lib'
}

task createPatchedJars {
	project.ant {
		taskdef name: "jarjar", classname: "com.tonicsystems.jarjar.JarJarTask", classpath: configurations.compile.asPath
		jarjar(jarfile: "lib/idea-junit-IJ12-jarjar.jar", filesetmanifest: "merge") {
			zipfileset(src: "/Applications/IntelliJ IDEA 12.app/plugins/junit/lib/idea-junit.jar")
			topLevelClassNamesIn("/Applications/IntelliJ IDEA 12.app/plugins/junit/lib/idea-junit.jar", "com.intellij").each { className ->
				rule pattern: className + "**", result: "ij12." + className + "@1"
			}
		}
		jarjar(jarfile: "lib/idea-junit-IJ13-jarjar.jar", filesetmanifest: "merge") {
			zipfileset(src: "/Applications/IntelliJ IDEA 13.app/plugins/junit/lib/idea-junit.jar")
			topLevelClassNamesIn("/Applications/IntelliJ IDEA 13.app/plugins/junit/lib/idea-junit.jar", "com.intellij").each { className ->
				rule pattern: className + "**", result: "ij13." + className + "@1"
			}
		}
	}
}

def topLevelClassNamesIn(String zipFile, String packagePrefix) {
	zipTree(zipFile).files.collect{ File file ->
		def path = file.absolutePath.replaceAll("[\\/]", ".")
		def i = path.lastIndexOf(packagePrefix)
		if (i == -1) null else path.substring(i).replaceAll(/(?:\$.*)?.class/, "")
	}.findAll{ it != null }.unique()
}